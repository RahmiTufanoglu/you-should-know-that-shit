var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.209,1,2.333]],["body/controllers/AppController.html",[0,2.111,1,4.073,2,1.776,3,0.323,4,0.281,5,0.201,6,4.312,7,0.323,8,0.023,9,0.943,10,0.323,11,0.182,12,0.017,13,0.02,14,0.017]],["title/modules/AppModule.html",[15,1.209,16,2.333]],["body/modules/AppModule.html",[1,3.223,2,1.417,3,0.177,4,0.154,5,0.11,7,0.405,8,0.024,9,0.517,10,0.177,11,0.1,12,0.009,13,0.014,14,0.009,15,1.67,16,4.542,17,1.263,18,1.263,19,1.458,20,1.458,21,1.263,22,2.501,23,1.458,24,2.364,25,2.364,26,2.364,27,3.579,28,3.579,29,3.579,30,3.579,31,3.291,32,3.579,33,2.122,34,1.458,35,1.458,36,2.785,37,2.293,38,2.785,39,2.785,40,2.364,41,2.785,42,2.364,43,1.714,44,1.181,45,2.785,46,2.785,47,2.785,48,2.785,49,2.785,50,2.785,51,1.838,52,2.785,53,2.785,54,2.785,55,2.785,56,2.785,57,2.785,58,2.785,59,3.035,60,2.785,61,2.785,62,0.59,63,2.785,64,2.785,65,2.785,66,2.785,67,2.785,68,2.785,69,1.714,70,2.785,71,1.576,72,2.785,73,2.785,74,2.785,75,2.785,76,2.785,77,2.785,78,2.785,79,1.576]],["title/injectables/AppService.html",[32,2.127,80,0.733]],["body/injectables/AppService.html",[3,0.323,4,0.281,5,0.201,7,0.323,8,0.023,9,0.943,10,0.323,11,0.182,12,0.017,13,0.02,14,0.017,32,3.714,80,1.279,81,2.018,82,4.312]],["title/controllers/AuthController.html",[0,1.209,83,2.333]],["body/controllers/AuthController.html",[0,1.262,2,1.262,3,0.229,4,0.2,5,0.143,7,0.373,8,0.024,9,0.67,10,0.229,11,0.129,12,0.012,13,0.016,14,0.012,83,3.279,84,3.064,85,2.222,86,3.61,87,0.626,88,1.81,89,4.86,90,2.33,91,4.125,92,3.61,93,1.699,94,3.61,95,1.098,96,3.61,97,1.699,98,1.326,99,1.501,100,4.988,101,1.699,102,3.61,103,3.61,104,3.61,105,1.81,106,3.61,107,2.222,108,3.064,109,2.436,110,2.877,111,2.704,112,2.436,113,3.61,114,3.279,115,1.89,116,3.61,117,3.61,118,2.043,119,1.186,120,3.61,121,3.61,122,3.61,123,3.61,124,1.81,125,3.61,126,2.436,127,3.61,128,3.61,129,3.61]],["title/modules/AuthModule.html",[15,1.209,27,2.127]],["body/modules/AuthModule.html",[2,1.545,3,0.2,4,0.174,5,0.124,7,0.403,8,0.024,9,0.584,10,0.2,11,0.113,12,0.011,13,0.015,14,0.011,15,1.787,17,1.426,18,1.426,19,1.646,20,1.646,21,1.426,22,2.676,23,2.676,27,4.14,31,3.428,33,2.314,34,1.646,35,1.646,37,2.501,40,2.669,59,2.355,83,3.448,90,1.333,110,3.495,111,2.355,130,2.669,131,2.669,132,2.669,133,3.144,134,3.727,135,3.727,136,3.144,137,3.144,138,4.419,139,1.779,140,3.144,141,2.355,142,3.144,143,3.144,144,3.144,145,3.144,146,2.669,147,3.144,148,3.144,149,3.144]],["title/injectables/AuthService.html",[80,0.733,110,1.81]],["body/injectables/AuthService.html",[3,0.189,4,0.165,5,0.118,7,0.364,8,0.024,9,0.554,10,0.189,11,0.107,12,0.017,13,0.014,14,0.01,62,1.052,71,2.81,80,0.902,81,1.185,87,0.517,88,1.586,90,2.524,91,4.214,95,1.122,97,1.736,98,1.355,99,1.533,101,1.489,105,2.016,110,2.229,119,1.399,124,1.849,141,2.235,150,2.532,151,4.257,152,2.229,153,2.983,154,3.117,155,6.127,156,2.983,157,2.983,158,2.598,159,2.983,160,4.257,161,2.217,162,4.964,163,2.983,164,1.562,165,2.983,166,3.19,167,2.532,168,2.62,169,2.835,170,2.229,171,2.532,172,4.257,173,2.983,174,2.983,175,2.983,176,1.399,177,2.983,178,2.983,179,2.983]],["title/controllers/CategoriesController.html",[0,1.209,180,2.333]],["body/controllers/CategoriesController.html",[0,0.707,2,0.707,3,0.128,4,0.112,5,0.08,7,0.342,8,0.024,9,0.375,10,0.128,11,0.072,12,0.007,13,0.011,14,0.007,51,0.917,62,1.14,85,1.244,87,0.35,88,1.184,90,2.675,93,1.693,95,1.094,97,1.693,98,1.321,99,1.495,101,1.693,105,2.184,107,1.956,109,1.364,114,1.364,115,1.059,118,1.144,119,0.664,124,1.803,126,3.005,169,2.535,170,2.535,176,1.997,180,2.145,181,1.716,182,3.78,183,1.112,184,1.547,185,1.547,186,1.547,187,1.547,188,1.716,189,2.909,190,4.397,191,1.364,192,1.716,193,2.022,194,1.364,195,2.145,196,2.356,197,2.145,198,1.515,199,2.022,200,0.984,201,2.788,202,1.716,203,2.022,204,0.984,205,1.515,206,2.022,207,0.984,208,3.152,209,1.515,210,2.022,211,2.145,212,1.364,213,1.364,214,1.364,215,2.223,216,1.716,217,0.984,218,1.515,219,2.145,220,2.145,221,2.651,222,0.664,223,2.022,224,1.515,225,2.022,226,1.364,227,2.022,228,1.364,229,2.757,230,2.022,231,3.267,232,3.267,233,1.364,234,3.267,235,1.364,236,2.022,237,2.145,238,1.364,239,1.364,240,2.022,241,1.364,242,1.364,243,2.022,244,1.364,245,1.364,246,1.364,247,2.022,248,1.364]],["title/modules/CategoriesModule.html",[15,1.209,28,2.127]],["body/modules/CategoriesModule.html",[2,1.808,3,0.252,4,0.219,5,0.157,7,0.402,8,0.024,9,0.736,10,0.252,11,0.142,12,0.013,13,0.017,14,0.013,15,2.012,17,1.799,18,1.799,19,2.076,20,2.076,21,1.799,22,3.014,23,2.076,28,3.993,33,2.708,34,2.076,35,2.076,37,2.244,43,2.44,44,1.681,180,3.884,215,3.672,216,3.365,229,1.799,249,3.365,250,3.365,251,3.965,252,3.965,253,3.365,254,3.965]],["title/injectables/CategoriesService.html",[80,0.733,215,1.956]],["body/injectables/CategoriesService.html",[3,0.18,4,0.157,5,0.112,7,0.372,8,0.024,9,0.525,10,0.18,11,0.101,12,0.01,13,0.014,14,0.01,44,1.2,62,1.189,80,0.869,81,1.124,87,0.49,88,1.527,95,1.322,97,1.961,98,1.53,99,1.732,101,1.961,105,2.381,119,0.93,124,2.089,152,1.482,168,1.742,176,1.583,183,1.433,184,2.571,185,1.995,186,1.995,187,1.995,188,3.479,189,3.174,200,1.995,201,3.063,204,1.995,207,1.995,215,2.32,217,1.377,218,3.071,229,1.284,253,2.402,255,2.402,256,2.83,257,3.252,258,2.83,259,4.099,260,2.83,261,2.83,262,2.83,263,2.83,264,4.169,265,2.83,266,1.482,267,1.91,268,1.91,269,1.91,270,1.284,271,2.83,272,2.83,273,2.83,274,2.83,275,2.83,276,2.83]],["title/classes/Category.html",[11,0.124,229,1.568]],["body/classes/Category.html",[3,0.218,4,0.19,5,0.136,7,0.366,8,0.024,10,0.218,11,0.123,12,0.012,13,0.016,14,0.012,51,2.131,62,1.22,79,3.258,87,0.595,93,2.013,95,1.301,98,0.937,161,1.749,176,1.759,182,2.913,222,1.128,229,2.735,270,1.557,277,1.128,278,2.913,279,2.285,280,3.295,281,4.011,282,3.613,283,2.572,284,3.169,285,3.432,286,2.285,287,2.316,288,3.432,289,2.933,290,3.432,291,2.913,292,3.432,293,2.316,294,3.432,295,3.169,296,3.169,297,3.169,298,4.696,299,2.316,300,4.068,301,3.432,302,2.913,303,2.316,304,3.169,305,3.432]],["title/classes/ClaimEntity.html",[11,0.124,196,1.682]],["body/classes/ClaimEntity.html",[3,0.243,4,0.211,5,0.151,7,0.321,8,0.024,10,0.243,11,0.137,12,0.013,13,0.017,14,0.013,51,2.29,62,1.198,79,3.403,87,0.662,93,1.976,95,1.278,98,1.042,161,2.239,176,1.857,196,3.042,222,1.255,270,1.733,277,1.255,279,2.456,280,3.478,283,2.862,284,3.406,286,2.456,287,2.578,293,2.578,295,3.406,296,3.406,297,3.406,299,2.578,300,4.057,303,2.578,304,3.406,306,3.243,307,3.82,308,3.82,309,3.82,310,3.243]],["title/controllers/ClaimsController.html",[0,1.209,311,2.333]],["body/controllers/ClaimsController.html",[0,0.707,2,0.707,3,0.128,4,0.112,5,0.08,7,0.342,8,0.024,9,0.375,10,0.128,11,0.072,12,0.007,13,0.011,14,0.007,51,0.917,62,1.14,85,1.244,87,0.35,88,1.184,90,2.675,93,1.693,95,1.094,97,1.693,98,1.321,99,1.495,101,1.693,105,2.184,107,1.956,109,1.364,114,1.364,115,1.059,118,1.144,119,0.664,124,1.803,126,3.005,169,2.535,170,2.535,176,1.997,183,1.112,184,1.547,185,1.547,186,1.547,187,1.547,190,4.397,191,1.364,192,1.716,194,1.364,195,2.145,196,3.125,197,2.145,198,1.515,200,0.984,201,2.788,202,1.716,204,0.984,205,1.515,207,0.984,208,3.152,209,1.515,211,2.145,212,1.364,213,1.364,214,1.364,217,0.984,219,2.145,220,2.145,221,2.651,222,0.664,224,1.515,226,2.145,228,1.364,231,3.267,232,3.267,233,1.364,234,3.267,235,1.364,237,2.145,238,1.364,239,1.364,241,1.364,242,1.364,244,1.364,245,1.364,246,1.364,248,1.364,266,1.059,310,3.78,311,2.145,312,1.716,313,1.716,314,2.909,315,2.022,316,2.022,317,2.022,318,2.022,319,2.022,320,2.223,321,1.716,322,1.515,323,2.022,324,2.022,325,2.022,326,2.022,327,2.022,328,2.022]],["title/modules/ClaimsModule.html",[15,1.209,29,2.127]],["body/modules/ClaimsModule.html",[2,1.808,3,0.252,4,0.219,5,0.157,7,0.402,8,0.024,9,0.736,10,0.252,11,0.142,12,0.013,13,0.017,14,0.013,15,2.012,17,1.799,18,1.799,19,2.076,20,2.076,21,1.799,22,3.014,23,2.076,29,3.993,33,2.708,34,2.076,35,2.076,37,2.244,43,2.44,44,1.681,196,1.929,311,3.884,320,3.672,321,3.365,322,2.971,329,3.365,330,3.365,331,3.965,332,3.965,333,3.965]],["title/injectables/ClaimsService.html",[80,0.733,320,1.956]],["body/injectables/ClaimsService.html",[3,0.18,4,0.157,5,0.112,7,0.372,8,0.024,9,0.525,10,0.18,11,0.101,12,0.01,13,0.014,14,0.01,44,1.2,62,1.189,80,0.869,81,1.124,87,0.49,88,1.527,95,1.322,97,1.961,98,1.53,99,1.732,101,1.961,105,2.381,119,0.93,124,2.089,152,1.482,168,1.742,176,1.583,183,1.433,184,2.571,185,1.995,186,1.995,187,1.995,196,1.377,200,1.995,201,3.063,204,1.995,207,1.995,208,3.496,217,1.377,226,2.766,257,3.252,266,1.482,267,1.91,268,1.91,269,1.91,270,1.284,313,3.479,314,3.174,320,2.32,322,2.12,334,2.402,335,2.83,336,2.83,337,4.099,338,2.83,339,2.83,340,2.83,341,2.83,342,2.83,343,2.83,344,2.83,345,2.83,346,2.83,347,2.83,348,2.83]],["title/classes/CreateCategoryDto.html",[11,0.124,189,1.956]],["body/classes/CreateCategoryDto.html",[3,0.259,4,0.225,5,0.161,7,0.37,8,0.024,10,0.259,11,0.189,12,0.014,13,0.018,14,0.014,62,1.115,87,0.706,93,1.84,95,1.19,119,2.147,189,2.978,229,2.645,277,1.338,279,2.561,282,3.934,286,2.561,302,3.457,349,4.948,350,3.051,351,3.934,352,3.051,353,4.073,354,4.158,355,4.073,356,2.749,357,2.749,358,2.749,359,3.551,360,2.507]],["title/classes/CreateClaimDto.html",[11,0.124,314,1.956]],["body/classes/CreateClaimDto.html",[3,0.264,4,0.23,5,0.164,7,0.339,8,0.024,10,0.264,11,0.191,12,0.014,13,0.018,14,0.014,62,1.13,87,0.72,93,1.864,95,1.205,119,2.158,161,1.985,196,2.863,277,1.365,279,2.593,286,2.593,314,3.016,351,3.971,352,3.112,354,4.189,356,2.803,357,2.803,358,2.803,359,3.596,360,2.556,361,4.995,362,3.112,363,4.154,364,4.154]],["title/classes/CreateFactDto.html",[11,0.124,365,1.956]],["body/classes/CreateFactDto.html",[3,0.238,4,0.208,5,0.148,7,0.317,8,0.024,10,0.238,11,0.179,12,0.013,13,0.017,14,0.013,62,1.187,87,0.65,93,1.959,95,1.266,99,1.54,119,2.224,161,2.223,229,1.702,277,1.233,279,2.427,282,2.532,286,2.427,289,2.726,351,3.78,352,2.811,354,4.4,356,2.532,357,2.532,358,2.532,359,3.78,360,2.309,365,2.823,366,5.067,367,2.811,368,4.197,369,3.752,370,3.752,371,3.752]],["title/classes/CreateUserDto.html",[11,0.124,372,1.682]],["body/classes/CreateUserDto.html",[3,0.197,4,0.171,5,0.122,7,0.278,8,0.024,10,0.197,11,0.157,12,0.01,13,0.015,14,0.01,62,1.277,69,3.119,71,2.869,87,0.537,93,2.108,95,1.362,119,2.266,161,2.429,164,2.654,277,1.018,279,2.128,286,2.128,351,3.42,354,4.269,356,2.09,357,2.09,358,2.09,359,4.067,360,1.906,372,2.128,373,5.258,374,2.09,375,3.797,376,3.797,377,3.097,378,3.097,379,3.097,380,5.068,381,3.097,382,3.097,383,3.097,384,3.097,385,3.097,386,3.097,387,4.373,388,5.506,389,3.097,390,4.373,391,3.097,392,3.097,393,3.097]],["title/classes/Fact.html",[11,0.124,289,1.682]],["body/classes/Fact.html",[3,0.188,4,0.164,5,0.117,7,0.314,8,0.024,10,0.188,11,0.106,12,0.01,13,0.014,14,0.01,51,1.924,62,1.211,79,3.363,87,0.514,93,1.998,95,1.291,98,0.809,99,1.309,161,2.213,176,1.626,222,0.974,229,2.838,270,1.346,277,0.974,279,2.063,280,3.046,281,2.222,284,2.861,286,2.063,287,2.001,289,3.044,291,2.517,293,2.001,295,3.34,296,2.861,297,2.861,299,2.001,300,3.855,303,2.001,304,3.34,368,4.452,394,2.517,395,2.966,396,2.966,397,2.966,398,3.599,399,4.24,400,4.24,401,4.24,402,4.24,403,4.24,404,4.046,405,2.966,406,2.966,407,2.966,408,4.24,409,2.966,410,4.583,411,2.966,412,4.24,413,2.966,414,3.599,415,2.966]],["title/controllers/FactsController.html",[0,1.209,416,2.333]],["body/controllers/FactsController.html",[0,0.625,2,0.625,3,0.114,4,0.099,5,0.143,7,0.309,8,0.024,9,0.332,10,0.114,11,0.064,12,0.006,13,0.01,14,0.006,51,0.811,62,1.086,85,1.1,87,0.31,88,1.073,90,2.604,93,1.593,95,1.03,97,1.593,98,1.243,99,1.407,101,1.593,105,2.104,107,1.773,118,1.011,119,0.587,124,1.697,158,2.065,169,2.55,170,2.385,176,2.059,183,1.452,184,1.402,185,1.402,186,1.402,187,1.402,190,4.301,191,1.206,194,1.206,195,1.944,197,1.944,200,0.87,201,2.677,204,0.87,207,0.87,211,2.803,212,2.443,213,1.206,214,1.206,217,0.87,219,1.944,220,1.944,221,2.443,222,0.587,228,1.206,231,3.074,232,3.074,233,1.206,234,3.074,235,1.206,237,1.944,238,1.206,239,1.206,241,1.206,242,1.206,244,1.206,245,1.206,246,1.206,248,1.206,266,0.936,281,3.111,289,3.124,365,2.756,368,1.339,416,1.944,417,1.517,418,1.517,419,1.787,420,1.787,421,1.787,422,1.787,423,2.881,424,1.787,425,1.787,426,1.787,427,2.881,428,4.869,429,1.787,430,1.787,431,1.787,432,1.787,433,3.28,434,1.787,435,2.881,436,1.787,437,2.881,438,4.869,439,1.787,440,2.049,441,1.517,442,1.339,443,2.159,444,1.787,445,1.787,446,4.555,447,1.787,448,1.787,449,1.339,450,1.787,451,1.517,452,1.787,453,1.787,454,1.339,455,1.787,456,1.787,457,1.787,458,1.787]],["title/modules/FactsModule.html",[15,1.209,30,2.127]],["body/modules/FactsModule.html",[2,1.744,3,0.238,4,0.208,5,0.148,7,0.406,8,0.024,9,0.696,10,0.238,11,0.134,12,0.013,13,0.017,14,0.013,15,1.959,17,1.702,18,1.702,19,1.965,20,1.965,21,1.702,22,2.933,23,1.965,30,3.932,33,2.611,34,1.965,35,1.965,37,2.124,43,2.309,44,1.591,59,2.811,289,1.826,416,3.78,440,3.616,441,3.185,442,2.811,459,3.185,460,3.185,461,3.752,462,3.752,463,3.752,464,3.185,465,3.185,466,3.752,467,3.752,468,3.752,469,3.185]],["title/injectables/FactsService.html",[80,0.733,440,1.956]],["body/injectables/FactsService.html",[3,0.18,4,0.157,5,0.112,7,0.372,8,0.024,9,0.525,10,0.18,11,0.101,12,0.01,13,0.014,14,0.01,44,1.2,62,1.189,80,0.869,81,1.124,87,0.49,88,1.527,95,1.322,97,1.961,98,1.53,99,1.732,101,1.961,105,2.381,119,0.93,124,2.089,152,1.482,168,1.742,176,1.583,183,1.433,184,2.571,185,1.995,186,1.995,187,1.995,200,1.995,201,3.063,204,1.995,207,1.995,217,1.377,257,3.252,266,1.482,267,1.91,268,1.91,269,1.91,270,1.284,289,1.377,365,3.174,418,3.479,433,3.802,440,2.32,442,2.12,443,3.071,470,2.402,471,2.83,472,2.83,473,4.099,474,2.83,475,2.83,476,2.83,477,2.83,478,2.83,479,2.83,480,2.83,481,2.83,482,2.83,483,2.83,484,2.83]],["title/injectables/JwtAuthGuard.html",[80,0.733,115,1.81]],["body/injectables/JwtAuthGuard.html",[3,0.311,4,0.27,5,0.193,7,0.375,8,0.024,9,0.908,10,0.311,11,0.175,12,0.017,13,0.02,14,0.017,80,1.25,81,1.942,115,3.089,139,2.768,485,4.151,486,3.664,487,4.151,488,2.219,489,4.89]],["title/injectables/JwtStrategy.html",[80,0.733,134,2.127]],["body/injectables/JwtStrategy.html",[3,0.243,4,0.211,5,0.151,7,0.382,8,0.024,9,0.709,10,0.243,11,0.137,12,0.013,13,0.017,14,0.013,62,0.81,79,2.162,80,1.07,81,1.517,87,0.662,88,1.88,90,2.397,95,1.141,97,1.336,98,1.042,99,1.18,101,1.336,105,1.88,124,1.423,134,3.106,139,2.162,146,3.243,152,2.959,158,2.549,164,2.643,167,3.243,176,1.658,488,1.733,490,3.243,491,4.797,492,3.82,493,3.82,494,3.82,495,3.82,496,3.243,497,2.862,498,3.243,499,3.243,500,3.243,501,3.243,502,3.82,503,3.82,504,3.82,505,3.82]],["title/injectables/LocalAuthGuard.html",[80,0.733,112,2.333]],["body/injectables/LocalAuthGuard.html",[3,0.311,4,0.27,5,0.193,7,0.375,8,0.024,9,0.908,10,0.311,11,0.175,12,0.017,13,0.02,14,0.017,80,1.25,81,1.942,112,3.981,139,2.768,486,3.664,487,4.151,488,2.219,506,4.151,507,4.89]],["title/injectables/LocalStrategy.html",[80,0.733,135,2.127]],["body/injectables/LocalStrategy.html",[3,0.222,4,0.194,5,0.138,7,0.386,8,0.024,9,0.65,10,0.222,11,0.125,12,0.012,13,0.016,14,0.012,62,1.009,71,3.285,80,1.009,81,1.39,87,0.607,88,1.773,90,2.294,95,1.076,97,1.665,98,1.299,99,1.47,101,1.224,105,1.773,110,3.279,111,2.623,118,1.982,124,1.304,135,2.93,139,1.982,152,1.833,158,2.294,161,2.332,164,2.493,169,1.833,170,1.833,372,1.704,488,1.588,491,4.04,496,2.972,497,2.623,499,2.972,500,2.972,501,2.972,508,2.972,509,3.501,510,3.501,511,4.76,512,3.501,513,2.972,514,4.76,515,3.501,516,2.155,517,3.501,518,3.501,519,3.501,520,2.972]],["title/classes/LoginUserDto.html",[11,0.124,521,2.59]],["body/classes/LoginUserDto.html",[3,0.311,4,0.27,5,0.193,7,0.375,8,0.024,10,0.311,11,0.175,12,0.017,13,0.02,14,0.017,183,1.71,222,1.607,277,1.607,372,2.38,374,3.3,488,2.219,516,3.01,521,4.42,522,4.151,523,3.01,524,4.151]],["title/classes/UpdateCategoryDto.html",[11,0.124,264,2.333]],["body/classes/UpdateCategoryDto.html",[3,0.311,4,0.27,5,0.193,7,0.375,8,0.024,10,0.311,11,0.175,12,0.017,13,0.02,14,0.017,183,1.71,189,2.768,218,3.664,222,1.607,264,3.981,277,1.607,350,3.664,488,2.219,523,3.01,525,4.151,526,4.89]],["title/classes/UpdateClaimDto.html",[11,0.124,208,1.956]],["body/classes/UpdateClaimDto.html",[3,0.311,4,0.27,5,0.193,7,0.375,8,0.024,10,0.311,11,0.175,12,0.017,13,0.02,14,0.017,183,1.71,208,3.339,222,1.607,226,3.3,277,1.607,314,2.768,362,3.664,488,2.219,523,3.01,527,4.151,528,4.89]],["title/classes/UpdateFactDto.html",[11,0.124,433,2.127]],["body/classes/UpdateFactDto.html",[3,0.311,4,0.27,5,0.193,7,0.375,8,0.024,10,0.311,11,0.175,12,0.017,13,0.02,14,0.017,183,1.71,222,1.607,277,1.607,365,2.768,367,3.664,433,3.631,443,3.664,488,2.219,523,3.01,529,4.151,530,4.89]],["title/classes/UpdateUserDto.html",[11,0.124,531,2.127]],["body/classes/UpdateUserDto.html",[3,0.311,4,0.27,5,0.193,7,0.375,8,0.024,10,0.311,11,0.175,12,0.017,13,0.02,14,0.017,183,1.71,222,1.607,277,1.607,372,2.38,374,3.3,488,2.219,516,3.01,523,3.01,524,4.151,531,3.631,532,4.151]],["title/classes/UserEntity.html",[11,0.124,158,1.466]],["body/classes/UserEntity.html",[3,0.181,4,0.157,5,0.112,7,0.261,8,0.024,10,0.181,11,0.102,12,0.01,13,0.014,14,0.01,51,2.403,62,1.28,69,2.975,71,2.736,79,3.773,87,0.493,93,2.113,95,1.366,98,0.776,158,1.745,161,2.441,164,2.532,176,1.588,222,0.935,270,1.291,277,0.935,279,2.002,280,2.975,283,3.969,284,3.575,286,2.002,287,1.92,293,1.92,295,3.954,296,2.777,297,2.777,299,1.92,300,4.175,303,1.92,304,3.954,375,3.622,376,3.622,398,2.415,404,3.083,414,2.415,454,2.132,533,2.415,534,2.845,535,4.115,536,4.115,537,2.845,538,2.845,539,2.845,540,2.845,541,3.493,542,2.845,543,4.115,544,4.115,545,2.845,546,2.845,547,2.845]],["title/controllers/UsersController.html",[0,1.209,548,2.333]],["body/controllers/UsersController.html",[0,0.585,2,0.585,3,0.106,4,0.093,5,0.066,7,0.317,8,0.024,9,0.311,10,0.106,11,0.06,12,0.006,13,0.009,14,0.006,51,0.759,62,1.2,69,2.458,85,1.03,87,0.29,88,1.017,90,2.708,93,1.742,95,1.126,97,1.742,98,1.36,99,1.539,101,1.742,105,2.222,107,1.681,109,1.129,114,1.129,115,0.876,118,0.947,119,0.55,124,1.856,126,3.187,154,1.812,158,2.771,161,1.759,164,2.092,169,2.609,170,2.609,171,1.42,176,1.898,183,0.955,184,1.329,185,1.329,186,1.329,187,1.329,190,4.449,191,2.336,194,1.129,195,1.843,197,1.843,198,1.253,200,0.814,201,2.616,204,0.814,205,1.253,207,0.814,209,1.253,211,1.843,212,1.129,213,1.129,214,1.129,217,0.814,219,2.696,220,2.696,221,2.336,222,0.55,224,1.253,228,1.129,231,3.362,232,3.362,233,1.129,234,3.362,235,1.129,237,2.696,238,1.129,239,1.129,241,1.129,242,1.129,244,1.129,245,1.129,246,1.129,248,1.129,266,0.876,372,2.298,454,2.993,516,1.681,531,3.198,548,1.843,549,1.42,550,2.318,551,2.318,552,1.673,553,1.673,554,1.673,555,1.673,556,1.42,557,2.731,558,1.673,559,1.42,560,1.673,561,1.673,562,1.673,563,1.673,564,1.673,565,1.42,566,1.253,567,1.673,568,1.673,569,1.673,570,1.673,571,1.673,572,1.673,573,1.673,574,1.673,575,1.673]],["title/modules/UsersModule.html",[15,1.209,31,1.956]],["body/modules/UsersModule.html",[2,1.752,3,0.24,4,0.209,5,0.149,7,0.396,8,0.024,9,0.701,10,0.24,11,0.135,12,0.013,13,0.017,14,0.013,15,1.966,17,1.714,18,1.714,19,1.979,20,1.979,21,1.714,22,2.944,23,2.944,31,3.697,33,2.624,34,1.979,35,1.979,37,2.139,43,2.326,44,1.603,154,3.602,158,1.603,548,3.793,565,3.208,566,2.831,576,3.208,577,3.208,578,3.208,579,3.779,580,3.779,581,3.779]],["title/injectables/UsersService.html",[80,0.733,154,1.81]],["body/injectables/UsersService.html",[3,0.131,4,0.114,5,0.082,7,0.344,8,0.024,9,0.383,10,0.131,11,0.074,12,0.007,13,0.011,14,0.007,44,0.876,62,1.189,69,2.773,71,2.768,80,0.685,81,0.82,87,0.358,88,1.204,90,2.446,95,1.304,97,1.962,98,1.531,99,1.733,101,1.962,105,2.382,119,0.679,124,2.09,152,1.082,154,1.693,158,2.502,161,2.148,164,2.716,166,2.422,168,1.271,169,1.082,170,2.359,176,1.607,183,1.13,184,2.192,185,1.573,186,1.573,187,1.573,200,1.573,201,2.807,204,1.573,207,1.573,217,1.005,257,2.773,266,1.082,267,1.394,268,1.394,269,1.394,270,0.937,280,1.989,372,2.192,375,2.422,376,2.422,516,1.989,531,2.773,541,2.744,550,2.744,551,2.744,556,2.744,559,2.744,566,1.547,582,1.753,583,3.233,584,2.065,585,2.065,586,3.233,587,3.233,588,2.065,589,2.065,590,2.065,591,2.065,592,2.065,593,3.233,594,2.065,595,2.065,596,2.065,597,2.065,598,3.233,599,3.233,600,2.065,601,2.065,602,2.065,603,2.065,604,2.065,605,3.233,606,3.233,607,2.065,608,2.065]],["title/coverage.html",[609,3.535]],["body/coverage.html",[0,1.988,1,1.762,5,0.103,6,2.216,8,0.024,11,0.233,12,0.009,13,0.013,14,0.009,21,1.185,32,1.607,62,0.553,80,1.33,82,2.216,83,1.762,84,2.216,110,1.367,112,1.762,115,1.367,134,1.607,135,1.607,150,2.216,154,1.367,158,1.107,180,1.762,181,2.216,189,1.478,196,1.271,208,1.478,215,1.478,229,1.185,255,2.216,264,1.762,278,2.216,289,1.271,306,2.216,311,1.762,312,2.216,314,1.478,320,1.478,334,2.216,349,2.216,350,2.895,361,2.216,362,2.895,365,1.478,366,2.216,367,2.895,372,1.271,373,2.216,374,3.105,394,2.216,416,1.762,417,2.216,433,1.607,440,1.478,449,1.956,470,2.216,485,2.216,486,2.895,490,2.216,506,2.216,508,2.216,520,2.216,521,1.956,522,2.216,525,2.216,527,2.216,529,2.216,531,1.607,532,2.216,533,2.216,548,1.762,549,2.216,582,2.216,609,1.956,610,2.611,611,2.611,612,2.611,613,7.028,614,6.442,615,5.428,616,4.601,617,5.085,618,5.085,619,2.611,620,2.895,621,3.865,622,2.216,623,2.611,624,2.216,625,3.865,626,2.611,627,2.611,628,2.611]],["title/dependencies.html",[18,1.886,629,2.886]],["body/dependencies.html",[8,0.024,9,0.765,11,0.148,12,0.014,13,0.018,14,0.014,18,1.87,42,3.498,44,1.748,139,2.332,141,3.087,166,3.087,222,1.354,270,1.87,360,2.536,464,3.498,465,4.501,497,4.392,498,3.498,513,3.498,630,5.862,631,4.121,632,4.121,633,4.121,634,5.302,635,4.121,636,4.121,637,4.121,638,4.121,639,4.121,640,4.121,641,4.121,642,4.121,643,4.121,644,4.121,645,4.121,646,4.121,647,4.121,648,4.121,649,4.121,650,4.121,651,4.121,652,4.121,653,4.121]],["title/miscellaneous/enumerations.html",[654,1.633,655,3.529]],["body/miscellaneous/enumerations.html",[8,0.023,12,0.017,13,0.02,14,0.017,87,0.855,282,4.004,654,2.794,655,4.19,656,4.936,657,4.936,658,5.933,659,5.601,660,5.933,661,5.933,662,5.933]],["title/miscellaneous/functions.html",[654,1.633,663,3.529]],["body/miscellaneous/functions.html",[5,0.197,8,0.022,12,0.017,13,0.02,14,0.017,21,2.898,87,0.864,97,1.743,98,1.36,99,1.539,101,1.743,161,1.856,620,3.734,622,5.065,624,4.23,654,2.821,663,4.23,664,4.983,665,4.23,666,4.23]],["title/index.html",[87,0.5,667,2.886,668,2.886]],["body/index.html",[4,0.204,8,0.024,12,0.012,13,0.017,14,0.012,257,2.268,404,2.762,609,2.762,669,3.686,670,3.686,671,4.928,672,3.686,673,3.686,674,3.686,675,3.686,676,3.686,677,3.686,678,3.686,679,3.686,680,3.686,681,5.552,682,3.686,683,3.686,684,3.686,685,6.491,686,3.686,687,3.686,688,3.686,689,6.356,690,3.686,691,3.686,692,4.928,693,3.686,694,3.686,695,3.686,696,3.686,697,4.928,698,4.928,699,3.686,700,3.686,701,3.686,702,4.928,703,4.928,704,3.686,705,3.686,706,3.686,707,3.686,708,3.686,709,3.129,710,3.686,711,3.686,712,3.686,713,3.686,714,3.686,715,3.686,716,3.686,717,3.686,718,3.686,719,3.686,720,3.686,721,3.686,722,3.686,723,3.686,724,3.686,725,3.686,726,3.686,727,3.686]],["title/modules.html",[17,2.141]],["body/modules.html",[8,0.02,12,0.016,13,0.02,14,0.016,16,3.21,17,2.158,27,2.928,28,2.928,29,2.928,30,2.928,31,2.693,709,5.769,728,6.796,729,6.796,730,6.796]],["title/overview.html",[731,4.005]],["body/overview.html",[2,1.144,8,0.023,12,0.011,13,0.015,14,0.011,15,1.144,16,4.598,17,1.484,18,1.484,19,1.713,20,1.713,21,1.484,22,1.713,23,1.713,24,2.777,25,2.777,26,2.777,27,4.136,28,3.647,29,3.647,30,3.647,31,3.56,32,3.213,33,2.379,34,1.713,35,1.713,81,1.299,110,3.294,130,2.777,131,2.777,132,2.777,134,3.213,135,3.213,154,3.294,215,2.954,249,2.777,250,2.777,277,1.075,320,2.954,329,2.777,330,2.777,440,2.954,459,2.777,460,2.777,576,2.777,577,2.777,578,2.777,731,2.777,732,4.543,733,3.271,734,3.271]],["title/miscellaneous/variables.html",[654,1.633,735,3.529]],["body/miscellaneous/variables.html",[5,0.193,8,0.023,12,0.017,13,0.02,14,0.017,87,0.847,100,4.151,108,4.151,410,4.151,449,4.42,451,4.151,469,4.151,620,3.664,654,2.768,659,4.151,665,4.151,666,4.151,735,4.151,736,4.89,737,4.89,738,4.89,739,4.89,740,4.89]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["0.2.32",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["0.6.1",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":733,"title":{},"body":{"overview.html":{}}}],["13",{"_index":734,"title":{},"body":{"overview.html":{}}}],["2.2.5",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":536,"title":{},"body":{"classes/User.html":{}}}],["3306",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["4",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["4.0.0",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["4})@isnotempty()@minlength(4",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["5.0.1",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":732,"title":{},"body":{"overview.html":{}}}],["6.6.3",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["60s",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{}}}],["7.0.0",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["access_token",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["added",{"_index":233,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["amazing",{"_index":710,"title":{},"body":{"index.html":{}}}],["angular",{"_index":680,"title":{},"body":{"index.html":{}}}],["apicreatedresponse",{"_index":219,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse({type",{"_index":191,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["apimodelproperty",{"_index":354,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{}}}],["apimodelproperty()@isnotempty",{"_index":352,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{}}}],["apimodelproperty()@isnotempty()@isemail()@maxlength(300",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apimodelproperty()@isnotempty()@isstring",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apimodelproperty({minlength",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apinotfoundresponse",{"_index":220,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":221,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse({type",{"_index":195,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":438,"title":{},"body":{"controllers/FactsController.html":{}}}],["apiproperty",{"_index":300,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/Fact.html":{},"classes/User.html":{}}}],["apiproperty()@column({nullable",{"_index":283,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/User.html":{}}}],["apiproperty()@createdatecolumn({nullable",{"_index":287,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/Fact.html":{},"classes/User.html":{}}}],["apiproperty()@onetomany(undefined",{"_index":290,"title":{},"body":{"classes/Category.html":{}}}],["apiproperty()@primarygeneratedcolumn('uuid",{"_index":293,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/Fact.html":{},"classes/User.html":{}}}],["apiproperty({example",{"_index":398,"title":{},"body":{"classes/Fact.html":{},"classes/User.html":{}}}],["apitags",{"_index":439,"title":{},"body":{"controllers/FactsController.html":{}}}],["apitags('facts",{"_index":444,"title":{},"body":{"controllers/FactsController.html":{}}}],["app",{"_index":687,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":677,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":16,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":32,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":486,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guard/jwt",{"_index":224,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":83,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":487,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":489,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":507,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":27,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":720,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":110,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":711,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(10",{"_index":607,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(password",{"_index":608,"title":{},"body":{"injectables/UsersService.html":{}}}],["body",{"_index":211,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":730,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":728,"title":{},"body":{"modules.html":{}}}],["building",{"_index":672,"title":{},"body":{"index.html":{}}}],["cache",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["callback",{"_index":739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["categories",{"_index":182,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/Category.html":{}}}],["categories.controller",{"_index":252,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.service",{"_index":216,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories/categories.module",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["categories/entities/category.entity",{"_index":413,"title":{},"body":{"classes/Fact.html":{}}}],["categoriescontroller",{"_index":180,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":28,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesservice",{"_index":215,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["category",{"_index":229,"title":{"classes/Category.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFactDto.html":{},"classes/Fact.html":{},"coverage.html":{}}}],["category.dto",{"_index":218,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":350,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:11",{"_index":355,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:8",{"_index":353,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.id",{"_index":415,"title":{},"body":{"classes/Fact.html":{}}}],["categoryrepository",{"_index":259,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["claim",{"_index":196,"title":{"classes/Claim.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"coverage.html":{}}}],["claim.dto",{"_index":226,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/UpdateClaimDto.html":{}}}],["claim.dto.ts",{"_index":362,"title":{},"body":{"classes/CreateClaimDto.html":{},"classes/UpdateClaimDto.html":{},"coverage.html":{}}}],["claim.dto.ts:10",{"_index":364,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["claim.dto.ts:7",{"_index":363,"title":{},"body":{"classes/CreateClaimDto.html":{}}}],["claimrepository",{"_index":337,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["claims",{"_index":310,"title":{},"body":{"classes/Claim.html":{},"controllers/ClaimsController.html":{}}}],["claims.controller",{"_index":332,"title":{},"body":{"modules/ClaimsModule.html":{}}}],["claims.service",{"_index":321,"title":{},"body":{"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{}}}],["claims/claims.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["claims/dto/update",{"_index":225,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["claims/entities/claim.entity",{"_index":223,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["claimscontroller",{"_index":311,"title":{"controllers/ClaimsController.html":{}},"body":{"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"coverage.html":{}}}],["claimsmodule",{"_index":29,"title":{"modules/ClaimsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ClaimsModule.html":{},"modules.html":{},"overview.html":{}}}],["claimsservice",{"_index":320,"title":{"injectables/ClaimsService.html":{}},"body":{"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"coverage.html":{},"overview.html":{}}}],["claim})@apinotfoundresponse()@useguards(jwtauthguard)@get(':id",{"_index":202,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{}}}],["claim})@post",{"_index":192,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{}}}],["class",{"_index":11,"title":{"classes/Category.html":{},"classes/Claim.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":277,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":249,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":250,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_claimsmodule",{"_index":329,"title":{},"body":{"modules/ClaimsModule.html":{},"overview.html":{}}}],["cluster_claimsmodule_providers",{"_index":330,"title":{},"body":{"modules/ClaimsModule.html":{},"overview.html":{}}}],["cluster_factsmodule",{"_index":459,"title":{},"body":{"modules/FactsModule.html":{},"overview.html":{}}}],["cluster_factsmodule_providers",{"_index":460,"title":{},"body":{"modules/FactsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":576,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":577,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":578,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":295,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/Fact.html":{},"classes/User.html":{}}}],["configmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["consecutibe",{"_index":402,"title":{},"body":{"classes/Fact.html":{}}}],["const",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ClaimsService.html":{},"injectables/FactsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectrepository(category",{"_index":271,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(@injectrepository(claim",{"_index":343,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["constructor(@injectrepository(fact",{"_index":479,"title":{},"body":{"injectables/FactsService.html":{}}}],["constructor(@injectrepository(user",{"_index":597,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":509,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(categoryrepository",{"_index":256,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(claimrepository",{"_index":335,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["constructor(factrepository",{"_index":471,"title":{},"body":{"injectables/FactsService.html":{}}}],["constructor(private",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(userrepository",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('categories",{"_index":227,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('claims",{"_index":323,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["controller('facts",{"_index":445,"title":{},"body":{"controllers/FactsController.html":{}}}],["controller('users",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"controllers/FactsController.html":{},"modules/FactsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":609,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":183,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":228,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["create(createcategorydto",{"_index":188,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["create(createclaimdto",{"_index":313,"title":{},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{}}}],["create(createfactdto",{"_index":418,"title":{},"body":{"controllers/FactsController.html":{},"injectables/FactsService.html":{}}}],["create(createuserdto",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(user",{"_index":587,"title":{},"body":{"injectables/UsersService.html":{}}}],["createcategorydto",{"_index":189,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createclaimdto",{"_index":314,"title":{"classes/CreateClaimDto.html":{}},"body":{"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateClaimDto.html":{},"classes/UpdateClaimDto.html":{},"coverage.html":{}}}],["createdat",{"_index":280,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/Fact.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":296,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/Fact.html":{},"classes/User.html":{}}}],["createddate",{"_index":351,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{}}}],["createfactdto",{"_index":365,"title":{"classes/CreateFactDto.html":{}},"body":{"classes/CreateFactDto.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"classes/UpdateFactDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":372,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["database",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":286,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"classes/User.html":{}}}],["declarations",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":410,"title":{},"body":{"classes/Fact.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":212,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":245,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":431,"title":{},"body":{"controllers/FactsController.html":{}}}],["deleted",{"_index":248,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["deleteresult",{"_index":268,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ClaimsService.html":{},"injectables/FactsService.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":18,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":404,"title":{},"body":{"classes/Fact.html":{},"classes/User.html":{},"index.html":{}}}],["dest",{"_index":468,"title":{},"body":{"modules/FactsModule.html":{}}}],["destination",{"_index":737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":688,"title":{},"body":{"index.html":{}}}],["development.env",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["diskstorage",{"_index":736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["dto/create",{"_index":217,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":266,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":699,"title":{},"body":{"index.html":{}}}],["edit",{"_index":435,"title":{},"body":{"controllers/FactsController.html":{}}}],["efficient",{"_index":673,"title":{},"body":{"index.html":{}}}],["email",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["entities",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/category.entity",{"_index":253,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["entities/claim.entity",{"_index":322,"title":{},"body":{"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{}}}],["entities/fact.entity",{"_index":442,"title":{},"body":{"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{}}}],["entities/user.entity",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":297,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/Fact.html":{},"classes/User.html":{}}}],["entity{.ts,.js",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["enumerations",{"_index":655,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/fact.enum",{"_index":302,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{}}}],["envfilepath",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["example",{"_index":414,"title":{},"body":{"classes/Fact.html":{},"classes/User.html":{}}}],["expiresin",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":465,"title":{},"body":{"modules/FactsModule.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":451,"title":{},"body":{"controllers/FactsController.html":{},"miscellaneous/variables.html":{}}}],["extends",{"_index":488,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":495,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":503,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fact",{"_index":289,"title":{"classes/Fact.html":{}},"body":{"classes/Category.html":{},"classes/CreateFactDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"coverage.html":{}}}],["fact'})@column({nullable",{"_index":405,"title":{},"body":{"classes/Fact.html":{}}}],["fact.dto",{"_index":443,"title":{},"body":{"controllers/FactsController.html":{},"injectables/FactsService.html":{},"classes/UpdateFactDto.html":{}}}],["fact.dto.ts",{"_index":367,"title":{},"body":{"classes/CreateFactDto.html":{},"classes/UpdateFactDto.html":{},"coverage.html":{}}}],["fact.dto.ts:10",{"_index":369,"title":{},"body":{"classes/CreateFactDto.html":{}}}],["fact.dto.ts:17",{"_index":371,"title":{},"body":{"classes/CreateFactDto.html":{}}}],["fact.dto.ts:7",{"_index":370,"title":{},"body":{"classes/CreateFactDto.html":{}}}],["fact.id",{"_index":305,"title":{},"body":{"classes/Category.html":{}}}],["fact_category_enum",{"_index":282,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFactDto.html":{},"miscellaneous/enumerations.html":{}}}],["factrepository",{"_index":473,"title":{},"body":{"injectables/FactsService.html":{}}}],["facts",{"_index":281,"title":{},"body":{"classes/Category.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{}}}],["facts.controller",{"_index":462,"title":{},"body":{"modules/FactsModule.html":{}}}],["facts.service",{"_index":441,"title":{},"body":{"controllers/FactsController.html":{},"modules/FactsModule.html":{}}}],["facts/entities/fact.entity",{"_index":301,"title":{},"body":{"classes/Category.html":{}}}],["facts/facts.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["factscontroller",{"_index":416,"title":{"controllers/FactsController.html":{}},"body":{"controllers/FactsController.html":{},"modules/FactsModule.html":{},"coverage.html":{}}}],["factsmodule",{"_index":30,"title":{"modules/FactsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FactsModule.html":{},"modules.html":{},"overview.html":{}}}],["factsservice",{"_index":440,"title":{"injectables/FactsService.html":{}},"body":{"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"coverage.html":{},"overview.html":{}}}],["fact})@apinotfoundresponse()@apioperation({summary",{"_index":426,"title":{},"body":{"controllers/FactsController.html":{}}}],["fact})@apioperation({summary",{"_index":419,"title":{},"body":{"controllers/FactsController.html":{}}}],["false",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"classes/Category.html":{},"classes/Claim.html":{},"classes/Fact.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["file.buffer.tostring",{"_index":453,"title":{},"body":{"controllers/FactsController.html":{}}}],["fileinterceptor('file",{"_index":448,"title":{},"body":{"controllers/FactsController.html":{}}}],["filename",{"_index":738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["find",{"_index":427,"title":{},"body":{"controllers/FactsController.html":{}}}],["findall",{"_index":184,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@res",{"_index":235,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["findall(res",{"_index":194,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["findbyemail",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyemail(@param('email",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyemail(email",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyusername",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyusername(@param('username",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyusername(username",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":185,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":239,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":200,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["firstname",{"_index":375,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":237,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":671,"title":{},"body":{"index.html":{}}}],["function",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":663,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatefilename",{"_index":622,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["generatefilename(file",{"_index":666,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["get(':id",{"_index":238,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["get('profile",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@request",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":667,"title":{"index.html":{}},"body":{}}],["grow",{"_index":706,"title":{},"body":{"index.html":{}}}],["guard/jwt",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/local",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["hashpassword",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashpassword(password",{"_index":593,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":678,"title":{},"body":{"index.html":{}}}],["here",{"_index":717,"title":{},"body":{"index.html":{}}}],["history",{"_index":658,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["host",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["httpcode",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":724,"title":{},"body":{"index.html":{}}}],["id",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@get(':id",{"_index":429,"title":{},"body":{"controllers/FactsController.html":{}}}],["identifier",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":504,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":368,"title":{},"body":{"classes/CreateFactDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{}}}],["image'})@column({nullable",{"_index":409,"title":{},"body":{"classes/Fact.html":{}}}],["image'})@post",{"_index":420,"title":{},"body":{"controllers/FactsController.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":87,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":80,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ClaimsService.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ClaimsService.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":81,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ClaimsService.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":267,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ClaimsService.html":{},"injectables/FactsService.html":{},"injectables/UsersService.html":{}}}],["inspired",{"_index":679,"title":{},"body":{"index.html":{}}}],["installation",{"_index":684,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":686,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":197,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["isemail",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["ismatch",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":359,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":713,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":498,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":115,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":502,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":134,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":721,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["legend",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":535,"title":{},"body":{"classes/User.html":{}}}],["license",{"_index":727,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":703,"title":{},"body":{"index.html":{}}}],["load",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":513,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":112,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":135,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":521,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["manytoone",{"_index":412,"title":{},"body":{"classes/Fact.html":{}}}],["manytoone(undefined",{"_index":395,"title":{},"body":{"classes/Fact.html":{}}}],["matching",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(300",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":232,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["metadata",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":654,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":702,"title":{},"body":{"index.html":{}}}],["mode",{"_index":692,"title":{},"body":{"index.html":{}}}],["model",{"_index":357,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{}}}],["module",{"_index":15,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":17,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":716,"title":{},"body":{"index.html":{}}}],["multermodule",{"_index":463,"title":{},"body":{"modules/FactsModule.html":{}}}],["multermodule.registerasync",{"_index":467,"title":{},"body":{"modules/FactsModule.html":{}}}],["mysql",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":722,"title":{},"body":{"index.html":{}}}],["name",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":681,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":726,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":464,"title":{},"body":{"modules/FactsModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":222,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":356,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{}}}],["nestjs/typeorm",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":520,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["node.js",{"_index":670,"title":{},"body":{"index.html":{}}}],["npm",{"_index":685,"title":{},"body":{"index.html":{}}}],["null",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["nullable",{"_index":304,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/Fact.html":{},"classes/User.html":{}}}],["number",{"_index":201,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":298,"title":{},"body":{"classes/Category.html":{}}}],["open",{"_index":704,"title":{},"body":{"index.html":{}}}],["optional",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateFactDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["ormconfig",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":731,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":629,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":213,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parseint(process.env.typeorm_port",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["parseintpipe",{"_index":437,"title":{},"body":{"controllers/FactsController.html":{}}}],["partialtype",{"_index":523,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcategorydto",{"_index":526,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createclaimdto",{"_index":528,"title":{},"body":{"classes/UpdateClaimDto.html":{}}}],["partialtype(createfactdto",{"_index":530,"title":{},"body":{"classes/UpdateFactDto.html":{}}}],["partialtype(createuserdto",{"_index":524,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["pass",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":497,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":499,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":500,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["payload",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["person",{"_index":547,"title":{},"body":{"classes/User.html":{}}}],["person'})@column({nullable",{"_index":545,"title":{},"body":{"classes/User.html":{}}}],["please",{"_index":714,"title":{},"body":{"index.html":{}}}],["politics",{"_index":660,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["port",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["post('/login",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":299,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/Fact.html":{},"classes/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":303,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/Fact.html":{},"classes/User.html":{}}}],["private",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ClaimsService.html":{},"injectables/FactsService.html":{},"injectables/UsersService.html":{}}}],["process.env.jwt_secret",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["process.env.typeorm_database",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.typeorm_host",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.typeorm_password",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.typeorm_username",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":694,"title":{},"body":{"index.html":{}}}],["production.env",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["progressive",{"_index":669,"title":{},"body":{"index.html":{}}}],["project",{"_index":705,"title":{},"body":{"index.html":{}}}],["promise",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":279,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"classes/User.html":{}}}],["property.decorator",{"_index":358,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{}}}],["providers",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["pseudonym",{"_index":544,"title":{},"body":{"classes/User.html":{}}}],["put",{"_index":214,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["put(':id",{"_index":241,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["put(':id')@apioperation({summary",{"_index":434,"title":{},"body":{"controllers/FactsController.html":{}}}],["ratu",{"_index":543,"title":{},"body":{"classes/User.html":{}}}],["read",{"_index":715,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":408,"title":{},"body":{"classes/Fact.html":{}}}],["remove",{"_index":186,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":246,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":204,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":257,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ClaimsService.html":{},"injectables/FactsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":190,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["res.json",{"_index":231,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["result",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":689,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":606,"title":{},"body":{"injectables/UsersService.html":{}}}],["scalable",{"_index":674,"title":{},"body":{"index.html":{}}}],["science",{"_index":661,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["secret",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":505,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":541,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["server",{"_index":675,"title":{},"body":{"index.html":{}}}],["show",{"_index":423,"title":{},"body":{"controllers/FactsController.html":{}}}],["side",{"_index":676,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{}}}],["sleep",{"_index":400,"title":{},"body":{"classes/Fact.html":{}}}],["slugs",{"_index":399,"title":{},"body":{"classes/Fact.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"modules/ClaimsModule.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"modules/FactsModule.html":{},"injectables/FactsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateClaimDto.html":{},"classes/UpdateFactDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specific",{"_index":428,"title":{},"body":{"controllers/FactsController.html":{}}}],["sponsors",{"_index":708,"title":{},"body":{"index.html":{}}}],["sport",{"_index":662,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../fact.enum.ts",{"_index":656,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":664,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../storage.config.ts",{"_index":665,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":82,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:14",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:20",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/guard/jwt",{"_index":485,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/local",{"_index":506,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":490,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:16",{"_index":494,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":492,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":508,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:13",{"_index":512,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:8",{"_index":510,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/categories/categories.controller.ts",{"_index":181,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/categories/categories.controller.ts:16",{"_index":193,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:27",{"_index":199,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:39",{"_index":203,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:49",{"_index":210,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:59",{"_index":206,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.module.ts",{"_index":251,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/categories/categories.service.ts",{"_index":255,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/categories/categories.service.ts:13",{"_index":260,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:17",{"_index":261,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:21",{"_index":262,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:25",{"_index":265,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:29",{"_index":263,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:9",{"_index":258,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/dto/create",{"_index":349,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/dto/update",{"_index":525,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/entities/category.entity.ts",{"_index":278,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/categories/entities/category.entity.ts:10",{"_index":294,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/entities/category.entity.ts:14",{"_index":285,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/entities/category.entity.ts:18",{"_index":288,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/entities/category.entity.ts:22",{"_index":292,"title":{},"body":{"classes/Category.html":{}}}],["src/claims/claims.controller.ts",{"_index":312,"title":{},"body":{"controllers/ClaimsController.html":{},"coverage.html":{}}}],["src/claims/claims.controller.ts:16",{"_index":315,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["src/claims/claims.controller.ts:27",{"_index":316,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["src/claims/claims.controller.ts:39",{"_index":317,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["src/claims/claims.controller.ts:49",{"_index":319,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["src/claims/claims.controller.ts:59",{"_index":318,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["src/claims/claims.module.ts",{"_index":331,"title":{},"body":{"modules/ClaimsModule.html":{}}}],["src/claims/claims.service.ts",{"_index":334,"title":{},"body":{"injectables/ClaimsService.html":{},"coverage.html":{}}}],["src/claims/claims.service.ts:13",{"_index":338,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/claims.service.ts:17",{"_index":339,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/claims.service.ts:21",{"_index":340,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/claims.service.ts:25",{"_index":342,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/claims.service.ts:29",{"_index":341,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/claims.service.ts:9",{"_index":336,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["src/claims/dto/create",{"_index":361,"title":{},"body":{"classes/CreateClaimDto.html":{},"coverage.html":{}}}],["src/claims/dto/update",{"_index":527,"title":{},"body":{"classes/UpdateClaimDto.html":{},"coverage.html":{}}}],["src/claims/entities/claim.entity.ts",{"_index":306,"title":{},"body":{"classes/Claim.html":{},"coverage.html":{}}}],["src/claims/entities/claim.entity.ts:12",{"_index":307,"title":{},"body":{"classes/Claim.html":{}}}],["src/claims/entities/claim.entity.ts:16",{"_index":308,"title":{},"body":{"classes/Claim.html":{}}}],["src/claims/entities/claim.entity.ts:8",{"_index":309,"title":{},"body":{"classes/Claim.html":{}}}],["src/config/storage.config.ts",{"_index":620,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/enums/fact.enum.ts",{"_index":657,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/facts/dto/create",{"_index":366,"title":{},"body":{"classes/CreateFactDto.html":{},"coverage.html":{}}}],["src/facts/dto/update",{"_index":529,"title":{},"body":{"classes/UpdateFactDto.html":{},"coverage.html":{}}}],["src/facts/entities/fact.entity.ts",{"_index":394,"title":{},"body":{"classes/Fact.html":{},"coverage.html":{}}}],["src/facts/entities/fact.entity.ts:16",{"_index":406,"title":{},"body":{"classes/Fact.html":{}}}],["src/facts/entities/fact.entity.ts:23",{"_index":411,"title":{},"body":{"classes/Fact.html":{}}}],["src/facts/entities/fact.entity.ts:27",{"_index":397,"title":{},"body":{"classes/Fact.html":{}}}],["src/facts/entities/fact.entity.ts:30",{"_index":396,"title":{},"body":{"classes/Fact.html":{}}}],["src/facts/entities/fact.entity.ts:9",{"_index":407,"title":{},"body":{"classes/Fact.html":{}}}],["src/facts/facts.controller.ts",{"_index":417,"title":{},"body":{"controllers/FactsController.html":{},"coverage.html":{}}}],["src/facts/facts.controller.ts:20",{"_index":421,"title":{},"body":{"controllers/FactsController.html":{}}}],["src/facts/facts.controller.ts:36",{"_index":425,"title":{},"body":{"controllers/FactsController.html":{}}}],["src/facts/facts.controller.ts:48",{"_index":430,"title":{},"body":{"controllers/FactsController.html":{}}}],["src/facts/facts.controller.ts:58",{"_index":436,"title":{},"body":{"controllers/FactsController.html":{}}}],["src/facts/facts.controller.ts:68",{"_index":432,"title":{},"body":{"controllers/FactsController.html":{}}}],["src/facts/facts.module.ts",{"_index":461,"title":{},"body":{"modules/FactsModule.html":{}}}],["src/facts/facts.service.ts",{"_index":470,"title":{},"body":{"injectables/FactsService.html":{},"coverage.html":{}}}],["src/facts/facts.service.ts:13",{"_index":474,"title":{},"body":{"injectables/FactsService.html":{}}}],["src/facts/facts.service.ts:17",{"_index":475,"title":{},"body":{"injectables/FactsService.html":{}}}],["src/facts/facts.service.ts:21",{"_index":476,"title":{},"body":{"injectables/FactsService.html":{}}}],["src/facts/facts.service.ts:25",{"_index":478,"title":{},"body":{"injectables/FactsService.html":{}}}],["src/facts/facts.service.ts:29",{"_index":477,"title":{},"body":{"injectables/FactsService.html":{}}}],["src/facts/facts.service.ts:9",{"_index":472,"title":{},"body":{"injectables/FactsService.html":{}}}],["src/main.ts",{"_index":624,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/create",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/login",{"_index":522,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":532,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":533,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:12",{"_index":538,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":540,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:23",{"_index":546,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:27",{"_index":537,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":542,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":534,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:8",{"_index":539,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:16",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:27",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:39",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:50",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:60",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:72",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:84",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":579,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:10",{"_index":585,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:14",{"_index":588,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":589,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:27",{"_index":592,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:31",{"_index":596,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:40",{"_index":595,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:44",{"_index":590,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":591,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:58",{"_index":594,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":690,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":693,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":695,"title":{},"body":{"index.html":{}}}],["started",{"_index":668,"title":{"index.html":{}},"body":{}}],["starter",{"_index":683,"title":{},"body":{"index.html":{}}}],["statements",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":718,"title":{},"body":{"index.html":{}}}],["storage",{"_index":449,"title":{},"body":{"controllers/FactsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["strategies/jwt.strategy",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":496,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["successfully",{"_index":234,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":446,"title":{},"body":{"controllers/FactsController.html":{}}}],["super",{"_index":501,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":709,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":729,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":698,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":701,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":700,"title":{},"body":{"index.html":{}}}],["tests",{"_index":697,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":707,"title":{},"body":{"index.html":{}}}],["this.authservice.login(req.user",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":518,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.categoriesservice.create(createcategorydto",{"_index":230,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findall",{"_index":236,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.findone(id",{"_index":240,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.remove(id",{"_index":247,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.update(id",{"_index":243,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoryrepository.delete(id",{"_index":276,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.find",{"_index":273,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findone(id",{"_index":274,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.save(createcategorydto",{"_index":272,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.update(id",{"_index":275,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.claimrepository.delete(id",{"_index":348,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimrepository.find",{"_index":345,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimrepository.findone(id",{"_index":346,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimrepository.save(createclaimdto",{"_index":344,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimrepository.update(id",{"_index":347,"title":{},"body":{"injectables/ClaimsService.html":{}}}],["this.claimsservice.create(createclaimdto",{"_index":324,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["this.claimsservice.findall",{"_index":325,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["this.claimsservice.findone(id",{"_index":326,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["this.claimsservice.remove(id",{"_index":328,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["this.claimsservice.update(id",{"_index":327,"title":{},"body":{"controllers/ClaimsController.html":{}}}],["this.factrepository.delete(id",{"_index":484,"title":{},"body":{"injectables/FactsService.html":{}}}],["this.factrepository.find",{"_index":481,"title":{},"body":{"injectables/FactsService.html":{}}}],["this.factrepository.findone(id",{"_index":482,"title":{},"body":{"injectables/FactsService.html":{}}}],["this.factrepository.save(createfactdto",{"_index":480,"title":{},"body":{"injectables/FactsService.html":{}}}],["this.factrepository.update(id",{"_index":483,"title":{},"body":{"injectables/FactsService.html":{}}}],["this.factsservice.create(createfactdto",{"_index":452,"title":{},"body":{"controllers/FactsController.html":{}}}],["this.factsservice.findall",{"_index":455,"title":{},"body":{"controllers/FactsController.html":{}}}],["this.factsservice.findone(id",{"_index":456,"title":{},"body":{"controllers/FactsController.html":{}}}],["this.factsservice.remove(id",{"_index":458,"title":{},"body":{"controllers/FactsController.html":{}}}],["this.factsservice.update(id",{"_index":457,"title":{},"body":{"controllers/FactsController.html":{}}}],["this.hashpassword(user.password",{"_index":599,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.delete(id",{"_index":604,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":601,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":605,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone(id",{"_index":602,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":600,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update(id",{"_index":603,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyemail(email",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.findbyusername(username",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(id",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{}}}],["three",{"_index":401,"title":{},"body":{"classes/Fact.html":{}}}],["throw",{"_index":519,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["touch",{"_index":719,"title":{},"body":{"index.html":{}}}],["true",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/CategoriesController.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["true})@apioperation({summary",{"_index":422,"title":{},"body":{"controllers/FactsController.html":{}}}],["true})@useguards(jwtauthguard)@get",{"_index":198,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/UsersController.html":{}}}],["twitter",{"_index":725,"title":{},"body":{"index.html":{}}}],["type",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"classes/Fact.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":270,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/Claim.html":{},"injectables/ClaimsService.html":{},"classes/Fact.html":{},"injectables/FactsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":254,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([claim",{"_index":333,"title":{},"body":{"modules/ClaimsModule.html":{}}}],["typeormmodule.forfeature([fact",{"_index":466,"title":{},"body":{"modules/FactsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":581,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forrootasync",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":682,"title":{},"body":{"index.html":{}}}],["ui",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":514,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":291,"title":{},"body":{"classes/Category.html":{},"classes/Fact.html":{}}}],["unique",{"_index":284,"title":{},"body":{"classes/Category.html":{},"classes/Claim.html":{},"classes/Fact.html":{},"classes/User.html":{}}}],["unit",{"_index":696,"title":{},"body":{"index.html":{}}}],["update",{"_index":187,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":242,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":207,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"controllers/FactsController.html":{},"injectables/FactsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatecategorydto",{"_index":264,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updateclaimdto",{"_index":208,"title":{"classes/UpdateClaimDto.html":{}},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"injectables/ClaimsService.html":{},"classes/UpdateClaimDto.html":{},"coverage.html":{}}}],["updated",{"_index":244,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/FactsController.html":{},"controllers/UsersController.html":{}}}],["updatefactdto",{"_index":433,"title":{"classes/UpdateFactDto.html":{}},"body":{"controllers/FactsController.html":{},"injectables/FactsService.html":{},"classes/UpdateFactDto.html":{},"coverage.html":{}}}],["updateresult",{"_index":269,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ClaimsService.html":{},"injectables/FactsService.html":{},"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":531,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":450,"title":{},"body":{"controllers/FactsController.html":{}}}],["uploads",{"_index":469,"title":{},"body":{"modules/FactsModule.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FactsModule.html":{}}}],["useguards",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@delete(':id",{"_index":205,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@put(':id",{"_index":209,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/ClaimsController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@httpcode(200)@post('/login",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":447,"title":{},"body":{"controllers/FactsController.html":{}}}],["user",{"_index":158,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"controllers/FactsController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":516,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:17",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":386,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email.tolowercase",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["username",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["usernamefield",{"_index":517,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userrepository",{"_index":586,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":454,"title":{},"body":{"controllers/FactsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["users'})@get",{"_index":424,"title":{},"body":{"controllers/FactsController.html":{}}}],["users.controller",{"_index":580,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":515,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users/entities/user.entity",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["users/users.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":548,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":31,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":154,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["user})@apinotfoundresponse()@useguards(jwtauthguard)@get",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["user})@apinotfoundresponse()@useguards(jwtauthguard)@get(':id",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["user})@post",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["validate",{"_index":491,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":511,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(undefined",{"_index":493,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":360,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateClaimDto.html":{},"classes/CreateFactDto.html":{},"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":659,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":735,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":691,"title":{},"body":{"index.html":{}}}],["website",{"_index":723,"title":{},"body":{"index.html":{}}}],["years",{"_index":403,"title":{},"body":{"classes/Fact.html":{}}}],["you'd",{"_index":712,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ClaimsModule.html":{},"modules/FactsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nClaimsModule\n\nClaimsModule\n\nAppModule -->\n\nClaimsModule->AppModule\n\n\n\n\n\nFactsModule\n\nFactsModule\n\nAppModule -->\n\nFactsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            ClaimsModule\n                        \n                        \n                            FactsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from './auth/auth.module';\nimport { FactsModule } from './facts/facts.module';\nimport { ClaimsModule } from './claims/claims.module';\nimport { CategoriesModule } from './categories/categories.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      cache: true,\n      // load: [configuration],\n      envFilePath: ['.env.development', '.env.production'],\n    }),\n    // TypeOrmModule.forRoot(),\n    // useFactory: () => ormConfig,\n    TypeOrmModule.forRootAsync({\n      useFactory: () => ({\n        type: 'mysql',\n        host: process.env.TYPEORM_HOST,\n        port: parseInt(process.env.TYPEORM_PORT) || 3306,\n        username: process.env.TYPEORM_USERNAME,\n        password: process.env.TYPEORM_PASSWORD,\n        database: process.env.TYPEORM_DATABASE,\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: false,\n      }),\n    }),\n    UsersModule,\n    CategoriesModule,\n    FactsModule,\n    ClaimsModule,\n    AuthModule,\n  ],\n  controllers: [\n    AppController,\n  ],\n  providers: [\n    AppService,\n  ],\n})\nexport class AppModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@HttpCode(200)@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, Post, Request, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalAuthGuard } from './guard/local-auth.guard';\nimport { JwtAuthGuard } from './guard/jwt-auth.guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {\n  }\n\n  @UseGuards(LocalAuthGuard)\n  @HttpCode(200)\n  @Post('/login')\n  async login(@Request() req): Promise {\n    return this.authService.login(req.user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req): any {\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      useFactory: async () => ({\n        secret: process.env.JWT_SECRET,\n        signOptions: {\n          expiresIn: '60s',\n        },\n      }),\n    }),\n  ],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n  ],\n  exports: [\n    AuthService,\n  ],\n  controllers: [\n    AuthController,\n  ],\n})\nexport class AuthModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { UserEntity } from '../users/entities/user.entity';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n  ) {\n  }\n\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.findByEmail(email);\n    const isMatch = await bcrypt.compare(pass, user.password);\n    if (user && isMatch) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login({ id, password }: UserEntity): Promise {\n    const payload = { id, password };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: ClaimEntity})@Post()\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({type: ClaimEntity, isArray: true})@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({type: ClaimEntity})@ApiNotFoundResponse()@UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateClaimDto: UpdateClaimDto, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateClaimDto\n                                    \n                                                UpdateClaimDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post, Put, Res, UseGuards } from '@nestjs/common';\nimport { CategoriesService } from './categories.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { ApiCreatedResponse, ApiNotFoundResponse, ApiOkResponse } from '@nestjs/swagger';\nimport { ClaimEntity } from '../claims/entities/claim.entity';\nimport { JwtAuthGuard } from '../auth/guard/jwt-auth.guard';\nimport { UpdateClaimDto } from '../claims/dto/update-claim.dto';\n\n@Controller('categories')\nexport class CategoriesController {\n  constructor(private readonly categoriesService: CategoriesService) {\n  }\n\n  @ApiCreatedResponse({ type: ClaimEntity })\n  @Post()\n  async create(@Body() createCategoryDto: CreateCategoryDto, @Res() res): Promise {\n    const category = await this.categoriesService.create(createCategoryDto);\n    return res.json({\n      message: 'Category has been added successfully',\n      category,\n    });\n  }\n\n  @ApiOkResponse({ type: ClaimEntity, isArray: true })\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findAll(@Res() res): Promise {\n    const categories = await this.categoriesService.findAll();\n    return res.json({\n      message: 'All categories have been found successfully',\n      categories,\n    });\n  }\n\n  @ApiOkResponse({ type: ClaimEntity })\n  @ApiNotFoundResponse()\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  async findOne(@Param('id') id: number, @Res() res): Promise {\n    const category = await this.categoriesService.findOne(id);\n    return res.json({\n      message: `Category with id #${id} has been found successfully.`,\n      category,\n    });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Put(':id')\n  async update(@Param('id') id: number, @Body() updateClaimDto: UpdateClaimDto, @Res() res): Promise {\n    const category = await this.categoriesService.update(id, updateClaimDto);\n    return res.json({\n      message: `Category with the id #${id} has been updated successfully.`,\n      category,\n    });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  async remove(@Param('id') id: number, @Res() res): Promise {\n    const category = await this.categoriesService.remove(id);\n    return res.json({\n      message: `Category with the id #${id} has been deleted successfully.`,\n      category,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService\n\nCategoriesService\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/categories/categories.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoriesService } from './categories.service';\nimport { CategoriesController } from './categories.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Category } from './entities/category.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Category]),\n  ],\n  controllers: [\n    CategoriesController,\n  ],\n  providers: [\n    CategoriesService,\n  ],\n})\nexport class CategoriesModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/categories/categories.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteResult, Repository, UpdateResult } from 'typeorm';\nimport { Category } from './entities/category.entity';\n\n@Injectable()\nexport class CategoriesService {\n  constructor(@InjectRepository(Category) private readonly categoryRepository: Repository) {\n  }\n\n  create(createCategoryDto: CreateCategoryDto): Promise {\n    return this.categoryRepository.save(createCategoryDto);\n  }\n\n  findAll(): Promise {\n    return this.categoryRepository.find();\n  }\n\n  findOne(id: number): Promise {\n    return this.categoryRepository.findOne(id);\n  }\n\n  update(id: number, updateCategoryDto: UpdateCategoryDto): Promise {\n    return this.categoryRepository.update(id, updateCategoryDto);\n  }\n\n  remove(id: number): Promise {\n    return this.categoryRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/entities/category.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                createdAt\n                            \n                            \n                                facts\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FACT_CATEGORY_ENUM\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({nullable: false, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/entities/category.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@CreateDateColumn({nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/entities/category.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            facts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Fact[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/entities/category.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/entities/category.entity.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Fact } from '../../facts/entities/fact.entity';\nimport { FACT_CATEGORY_ENUM } from '../../enums/fact.enum';\n\n@Entity({ name: 'categories' })\nexport class Category {\n  @ApiProperty()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ApiProperty()\n  @Column({ nullable: false, unique: true })\n  category: FACT_CATEGORY_ENUM;\n\n  @ApiProperty()\n  @CreateDateColumn({ nullable: false })\n  createdAt: Date;\n\n  @ApiProperty()\n  @OneToMany(() => Fact, fact => fact.id)\n  facts: Fact[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Claim.html":{"url":"classes/Claim.html","title":"class - ClaimEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/entities/claim.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                claim\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            claim\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({nullable: false, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/claims/entities/claim.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@CreateDateColumn({nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/claims/entities/claim.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/claims/entities/claim.entity.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity({ name: 'claims' })\nexport class ClaimEntity {\n  @ApiProperty()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ApiProperty()\n  @Column({ nullable: false, unique: true })\n  claim: string;\n\n  @ApiProperty()\n  @CreateDateColumn({ nullable: false })\n  createdAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ClaimsController.html":{"url":"controllers/ClaimsController.html","title":"controller - ClaimsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ClaimsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/claims.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                claims\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createClaimDto: CreateClaimDto, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: ClaimEntity})@Post()\n                \n            \n\n            \n                \n                    Defined in src/claims/claims.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createClaimDto\n                                    \n                                                CreateClaimDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({type: ClaimEntity, isArray: true})@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/claims/claims.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({type: ClaimEntity})@ApiNotFoundResponse()@UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/claims/claims.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/claims/claims.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateClaimDto: UpdateClaimDto, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/claims/claims.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateClaimDto\n                                    \n                                                UpdateClaimDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post, Put, Res, UseGuards } from '@nestjs/common';\nimport { ClaimsService } from './claims.service';\nimport { CreateClaimDto } from './dto/create-claim.dto';\nimport { UpdateClaimDto } from './dto/update-claim.dto';\nimport { ApiCreatedResponse, ApiNotFoundResponse, ApiOkResponse } from '@nestjs/swagger';\nimport { ClaimEntity } from './entities/claim.entity';\nimport { JwtAuthGuard } from '../auth/guard/jwt-auth.guard';\n\n@Controller('claims')\nexport class ClaimsController {\n  constructor(private readonly claimsService: ClaimsService) {\n  }\n\n  @ApiCreatedResponse({ type: ClaimEntity })\n  @Post()\n  async create(@Body() createClaimDto: CreateClaimDto, @Res() res): Promise {\n    const claim = await this.claimsService.create(createClaimDto);\n    return res.json({\n      message: 'ClaimEntity has been added successfully',\n      claim,\n    });\n  }\n\n  @ApiOkResponse({ type: ClaimEntity, isArray: true })\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findAll(@Res() res): Promise {\n    const claims = await this.claimsService.findAll();\n    return res.json({\n      message: 'All claims have been found successfully',\n      claims,\n    });\n  }\n\n  @ApiOkResponse({ type: ClaimEntity })\n  @ApiNotFoundResponse()\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  async findOne(@Param('id') id: number, @Res() res): Promise {\n    const claim = await this.claimsService.findOne(id);\n    return res.json({\n      message: `ClaimEntity with id #${id} has been found successfully.`,\n      claim,\n    });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Put(':id')\n  async update(@Param('id') id: number, @Body() updateClaimDto: UpdateClaimDto, @Res() res): Promise {\n    const claim = await this.claimsService.update(id, updateClaimDto);\n    return res.json({\n      message: `ClaimEntity with the id #${id} has been updated successfully.`,\n      claim,\n    });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  async remove(@Param('id') id: number, @Res() res): Promise {\n    const claim = await this.claimsService.remove(id);\n    return res.json({\n      message: `ClaimEntity with the id #${id} has been deleted successfully.`,\n      claim,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClaimsModule.html":{"url":"modules/ClaimsModule.html","title":"module - ClaimsModule","body":"\n                   \n\n\n\n\n    Modules\n    ClaimsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ClaimsModule\n\n\n\ncluster_ClaimsModule_providers\n\n\n\n\nClaimsService\n\nClaimsService\n\n\n\nClaimsModule\n\nClaimsModule\n\nClaimsModule -->\n\nClaimsService->ClaimsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/claims/claims.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClaimsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ClaimsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ClaimsService } from './claims.service';\nimport { ClaimsController } from './claims.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ClaimEntity } from './entities/claim.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([ClaimEntity]),\n  ],\n  controllers: [\n    ClaimsController,\n  ],\n  providers: [\n    ClaimsService,\n  ],\n})\nexport class ClaimsModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClaimsService.html":{"url":"injectables/ClaimsService.html","title":"injectable - ClaimsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ClaimsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/claims.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(claimRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/claims/claims.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        claimRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createClaimDto: CreateClaimDto)\n                \n            \n\n\n            \n                \n                    Defined in src/claims/claims.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createClaimDto\n                                    \n                                                CreateClaimDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/claims/claims.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/claims/claims.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/claims/claims.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateClaimDto: UpdateClaimDto)\n                \n            \n\n\n            \n                \n                    Defined in src/claims/claims.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateClaimDto\n                                    \n                                                UpdateClaimDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateClaimDto } from './dto/create-claim.dto';\nimport { UpdateClaimDto } from './dto/update-claim.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteResult, Repository, UpdateResult } from 'typeorm';\nimport { ClaimEntity } from './entities/claim.entity';\n\n@Injectable()\nexport class ClaimsService {\n  constructor(@InjectRepository(ClaimEntity) private readonly claimRepository: Repository) {\n  }\n\n  create(createClaimDto: CreateClaimDto): Promise {\n    return this.claimRepository.save(createClaimDto);\n  }\n\n  findAll(): Promise {\n    return this.claimRepository.find();\n  }\n\n  findOne(id: number): Promise {\n    return this.claimRepository.findOne(id);\n  }\n\n  update(id: number, updateClaimDto: UpdateClaimDto): Promise {\n    return this.claimRepository.update(id, updateClaimDto);\n  }\n\n  remove(id: number): Promise {\n    return this.claimRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/create-category.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                category\n                            \n                            \n                                    Readonly\n                                createdDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FACT_CATEGORY_ENUM\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/create-category.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            createdDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/create-category.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger/dist/decorators/api-model-property.decorator';\nimport { IsNotEmpty } from 'class-validator';\nimport { FACT_CATEGORY_ENUM } from '../../enums/fact.enum';\n\nexport class CreateCategoryDto {\n  @ApiModelProperty()\n  @IsNotEmpty()\n  readonly category: FACT_CATEGORY_ENUM;\n\n  @ApiModelProperty()\n  readonly createdDate: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClaimDto.html":{"url":"classes/CreateClaimDto.html","title":"class - CreateClaimDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClaimDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/dto/create-claim.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                claim\n                            \n                            \n                                    Readonly\n                                createdDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            claim\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/claims/dto/create-claim.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            createdDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/claims/dto/create-claim.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from '@nestjs/swagger/dist/decorators/api-model-property.decorator';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class CreateClaimDto {\n  @ApiModelProperty()\n  @IsNotEmpty()\n  readonly claim: string;\n\n  @ApiModelProperty()\n  readonly createdDate: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFactDto.html":{"url":"classes/CreateFactDto.html","title":"class - CreateFactDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFactDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/facts/dto/create-fact.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                createdDate\n                            \n                            \n                                    Readonly\n                                fact\n                            \n                            \n                                    Readonly\n                                    Optional\n                                image\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            createdDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/facts/dto/create-fact.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            fact\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/facts/dto/create-fact.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            image\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/facts/dto/create-fact.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { ApiModelProperty } from '@nestjs/swagger/dist/decorators/api-model-property.decorator';\n\nexport class CreateFactDto {\n  @ApiModelProperty()\n  @IsNotEmpty()\n  readonly fact: string;\n\n  @ApiModelProperty()\n  readonly createdDate: Date;\n\n  // @ApiModelProperty()\n  // @IsNotEmpty()\n  // readonly category: FACT_CATEGORY_ENUM;\n\n  @ApiModelProperty()\n  readonly image?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                createdDate\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                firstname\n                            \n                            \n                                    Readonly\n                                lastname\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            createdDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsEmail()@MaxLength(300)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty({minLength: 4})@IsNotEmpty()@MinLength(4)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator';\nimport { ApiModelProperty } from '@nestjs/swagger/dist/decorators/api-model-property.decorator';\n\nexport class CreateUserDto {\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsEmail()\n  @MaxLength(300)\n  readonly email: string;\n\n  @ApiModelProperty({ minLength: 4 })\n  @IsNotEmpty()\n  @MinLength(4)\n  readonly password: string;\n\n  @ApiModelProperty()\n  readonly createdDate: Date;\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  readonly firstname: string;\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  readonly lastname: string;\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  readonly username: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Fact.html":{"url":"classes/Fact.html","title":"class - Fact","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Fact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/facts/entities/fact.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                createdAt\n                            \n                            \n                                fact\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                image\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/facts/entities/fact.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@CreateDateColumn({nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/facts/entities/fact.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fact\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Slugs are able to sleep three consecutibe years.', description: 'A fact'})@Column({nullable: false, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/facts/entities/fact.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/facts/entities/fact.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            image\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '', description: 'A fact related image'})@Column({nullable: false, default: 'Default image'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/facts/entities/fact.entity.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Category } from '../../categories/entities/category.entity';\n\n@Entity({ name: 'facts' })\nexport class Fact {\n  @ApiProperty()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ApiProperty({\n    example: 'Slugs are able to sleep three consecutibe years.',\n    description: 'A fact',\n  })\n  @Column({ nullable: false, unique: true })\n  fact: string;\n\n  @ApiProperty({\n    example: '',\n    description: 'A fact related image',\n  })\n  @Column({ nullable: false, default: 'Default image' })\n  image?: string;\n\n  @ApiProperty()\n  @CreateDateColumn({ nullable: false })\n  createdAt: Date;\n\n  @ManyToOne(() => Category, category => category.id)\n  category: Category;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FactsController.html":{"url":"controllers/FactsController.html","title":"controller - FactsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FactsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/facts/facts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                facts\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createFactDto: CreateFactDto, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: Fact})@ApiOperation({summary: 'Create a fact with an image'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/facts/facts.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createFactDto\n                                    \n                                                CreateFactDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({type: Fact, isArray: true})@ApiOperation({summary: 'Show all users'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/facts/facts.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({type: Fact})@ApiNotFoundResponse()@ApiOperation({summary: 'Find a user with a specific id'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/facts/facts.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a user with a specific id'})\n                \n            \n\n            \n                \n                    Defined in src/facts/facts.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateFactDto: UpdateFactDto, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOperation({summary: 'Edit a user with a specific id'})\n                \n            \n\n            \n                \n                    Defined in src/facts/facts.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateFactDto\n                                    \n                                                UpdateFactDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, ParseIntPipe, Post, Put, Res } from '@nestjs/common';\nimport { ApiCreatedResponse, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { FactsService } from './facts.service';\nimport { Fact } from './entities/fact.entity';\nimport { CreateFactDto } from './dto/create-fact.dto';\nimport { UpdateFactDto } from './dto/update-fact.dto';\n\n@ApiTags('facts')\n@Controller('facts')\nexport class FactsController {\n  constructor(private readonly factsService: FactsService) {\n  }\n\n  @ApiCreatedResponse({ type: Fact })\n  @ApiOperation({ summary: 'Create a fact with an image' })\n  // @UseInterceptors(\n  //   FileInterceptor('file', { storage }),\n  // )\n  @Post()\n  async create(@Body() createFactDto: CreateFactDto,\n               // @UploadedFile() file: Express.Multer.File,\n               @Res() res,\n  ): Promise {\n    const fact = await this.factsService.create(createFactDto);\n    // const body = { fact, file: file.buffer.toString() };\n    return res.json({\n      message: 'Fact has been added successfully',\n      // body,\n      fact,\n    });\n  }\n\n  @ApiOkResponse({ type: Fact, isArray: true })\n  @ApiOperation({ summary: 'Show all users' })\n  @Get()\n  async findAll(@Res() res): Promise {\n    const facts = await this.factsService.findAll();\n    return res.json({\n      message: 'All facts have been found successfully',\n      facts,\n    });\n  }\n\n  @ApiOkResponse({ type: Fact })\n  @ApiNotFoundResponse()\n  @ApiOperation({ summary: 'Find a user with a specific id' })\n  @Get(':id')\n  async findOne(@Param('id') id: number, @Res() res): Promise {\n    const fact = await this.factsService.findOne(id);\n    return res.json({\n      message: `Fact with id #${id} has been found successfully.`,\n      fact,\n    });\n  }\n\n  @Put(':id')\n  @ApiOperation({ summary: 'Edit a user with a specific id' })\n  async update(@Param('id', ParseIntPipe) id: number, @Body() updateFactDto: UpdateFactDto, @Res() res): Promise {\n    const fact = await this.factsService.update(id, updateFactDto);\n    return res.json({\n      message: `Fact with the id #${id} has been updated successfully.`,\n      fact,\n    });\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete a user with a specific id' })\n  async remove(@Param('id') id: number, @Res() res): Promise {\n    const fact = await this.factsService.remove(id);\n    return res.json({\n      message: `Fact with the id #${id} has been deleted successfully.`,\n      fact,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FactsModule.html":{"url":"modules/FactsModule.html","title":"module - FactsModule","body":"\n                   \n\n\n\n\n    Modules\n    FactsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FactsModule\n\n\n\ncluster_FactsModule_providers\n\n\n\n\nFactsService\n\nFactsService\n\n\n\nFactsModule\n\nFactsModule\n\nFactsModule -->\n\nFactsService->FactsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/facts/facts.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FactsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FactsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FactsService } from './facts.service';\nimport { FactsController } from './facts.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { Fact } from './entities/fact.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Fact]),\n    MulterModule.registerAsync({\n      useFactory: () => ({\n        dest: './uploads',\n      }),\n    }),\n  ],\n  controllers: [\n    FactsController,\n  ],\n  providers: [\n    FactsService,\n  ],\n})\nexport class FactsModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FactsService.html":{"url":"injectables/FactsService.html","title":"injectable - FactsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FactsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/facts/facts.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(factRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/facts/facts.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        factRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createFactDto: CreateFactDto)\n                \n            \n\n\n            \n                \n                    Defined in src/facts/facts.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createFactDto\n                                    \n                                                CreateFactDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/facts/facts.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/facts/facts.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/facts/facts.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateFactDto: UpdateFactDto)\n                \n            \n\n\n            \n                \n                    Defined in src/facts/facts.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateFactDto\n                                    \n                                                UpdateFactDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateFactDto } from './dto/create-fact.dto';\nimport { UpdateFactDto } from './dto/update-fact.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteResult, Repository, UpdateResult } from 'typeorm';\nimport { Fact } from './entities/fact.entity';\n\n@Injectable()\nexport class FactsService {\n  constructor(@InjectRepository(Fact) private readonly factRepository: Repository) {\n  }\n\n  create(createFactDto: CreateFactDto): Promise {\n    return this.factRepository.save(createFactDto);\n  }\n\n  findAll(): Promise {\n    return this.factRepository.find();\n  }\n\n  findOne(id: number): Promise {\n    return this.factRepository.findOne(id);\n  }\n\n  update(id: number, updateFactDto: UpdateFactDto): Promise {\n    return this.factRepository.update(id, updateFactDto);\n  }\n\n  remove(id: number): Promise {\n    return this.factRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { UserEntity } from '../../users/entities/user.entity';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate({ id, email }: UserEntity): Promise {\n    return { id, email };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { CreateUserDto } from '../../users/dto/create-user.dto';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class LoginUserDto extends PartialType(CreateUserDto) {\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateClaimDto.html":{"url":"classes/UpdateClaimDto.html","title":"class - UpdateClaimDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateClaimDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/claims/dto/update-claim.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateClaimDto } from './create-claim.dto';\n\nexport class UpdateClaimDto extends PartialType(CreateClaimDto) {\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFactDto.html":{"url":"classes/UpdateFactDto.html","title":"class - UpdateFactDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFactDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/facts/dto/update-fact.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateFactDto } from './create-fact.dto';\n\nexport class UpdateFactDto extends PartialType(CreateFactDto) {\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                firstname\n                            \n                            \n                                id\n                            \n                            \n                                lastname\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@CreateDateColumn({nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/user.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({nullable: false, unique: true, length: 300})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/user.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/user.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/user.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/user.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({nullable: false, select: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/user.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'RaTu', description: 'A pseudonym of a person'})@Column({nullable: false, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/user.entity.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Entity({ name: 'users' })\nexport class UserEntity {\n  @ApiProperty()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ApiProperty()\n  @Column({ nullable: false })\n  firstname: string;\n\n  @ApiProperty()\n  @Column({ nullable: false })\n  lastname: string;\n\n  @ApiProperty({\n    example: 'RaTu',\n    description: 'A pseudonym of a person',\n  })\n  @Column({ nullable: false, unique: true })\n  username: string;\n\n  @ApiProperty()\n  @Column({ nullable: false, unique: true, length: 300 })\n  email: string;\n\n  @ApiProperty()\n  @Column({ nullable: false, select: false })\n  password: string;\n\n  @ApiProperty()\n  @CreateDateColumn({ nullable: false })\n  createdAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: UserEntity})@Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({type: UserEntity, isArray: true})@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: UserEntity})@ApiNotFoundResponse()@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByUsername\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: UserEntity})@ApiNotFoundResponse()@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({type: UserEntity})@ApiNotFoundResponse()@UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateUserDto: UpdateUserDto, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post, Put, Res, UseGuards } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ApiCreatedResponse, ApiNotFoundResponse, ApiOkResponse } from '@nestjs/swagger';\nimport { UserEntity } from './entities/user.entity';\nimport { JwtAuthGuard } from '../auth/guard/jwt-auth.guard';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {\n  }\n\n  @ApiCreatedResponse({ type: UserEntity })\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto, @Res() res): Promise {\n    const user = await this.usersService.create(createUserDto);\n    return res.json({\n      message: 'UserEntity has been added successfully',\n      user,\n    });\n  }\n\n  @ApiOkResponse({ type: UserEntity, isArray: true })\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findAll(@Res() res): Promise {\n    const users = await this.usersService.findAll();\n    return res.json({\n      message: 'All users have been found successfully',\n      users,\n    });\n  }\n\n  @ApiOkResponse({ type: UserEntity })\n  @ApiNotFoundResponse()\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  async findOne(@Param('id') id: number, @Res() res): Promise {\n    const user = await this.usersService.findOne(id);\n    return res.json({\n      message: `UserEntity with id #${id} has been found successfully.`,\n      user,\n    });\n  }\n\n\n  @UseGuards(JwtAuthGuard)\n  @Put(':id')\n  async update(@Param('id') id: number, @Body() updateUserDto: UpdateUserDto, @Res() res): Promise {\n    const user = await this.usersService.update(id, updateUserDto);\n    return res.json({\n      message: `UserEntity with the id #${id} has been updated successfully.`,\n      user,\n    });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  async remove(@Param('id') id: number, @Res() res): Promise {\n    const user = await this.usersService.remove(id);\n    return res.json({\n      message: `UserEntity with the id #${id} has been deleted successfully.`,\n      user,\n    });\n  }\n\n  @ApiCreatedResponse({ type: UserEntity })\n  @ApiNotFoundResponse()\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findByEmail(@Param('email') email: string, @Res() res): Promise {\n    const user = await this.usersService.findByEmail(email);\n    return res.json({\n      message: `UserEntity with the email #${email} has been found successfully.`,\n      user,\n    });\n  }\n\n  @ApiCreatedResponse({ type: UserEntity })\n  @ApiNotFoundResponse()\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findByUsername(@Param('username') username: string, @Res() res): Promise {\n    const user = await this.usersService.findByUsername(username);\n    return res.json({\n      message: `UserEntity with the username #${username} has been found successfully.`,\n      user,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEntity } from './entities/user.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity]),\n  ],\n  controllers: [\n    UsersController,\n  ],\n  providers: [\n    UsersService,\n  ],\n  exports: [\n    UsersService,\n  ],\n})\nexport class UsersModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findByEmail\n                            \n                            \n                                findByUsername\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByEmail\n                        \n                        \n                    \n                \n            \n            \n                \nfindByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findByUsername\n                        \n                        \n                    \n                \n            \n            \n                \nfindByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, user: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserEntity } from './entities/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteResult, Repository, UpdateResult } from 'typeorm';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectRepository(UserEntity) private readonly userRepository: Repository) {\n  }\n\n  async create(user: CreateUserDto): Promise {\n    user = {\n      ...user,\n      email: user.email.toLowerCase(),\n      password: await this.hashPassword(user.password),\n    };\n    return this.userRepository.save(user);\n  }\n\n  findAll(): Promise {\n    return this.userRepository.find();\n  }\n\n  findOne(id: number): Promise {\n    return this.userRepository.findOne(id);\n  }\n\n  async update(id: number, user: UpdateUserDto): Promise {\n    user = {\n      ...user,\n      email: user.email.toLowerCase(),\n      password: await this.hashPassword(user.password),\n    };\n    return this.userRepository.update(id, user);\n  }\n\n  remove(id: number): Promise {\n    return this.userRepository.delete(id);\n  }\n\n  findByEmail(email: string): Promise {\n    return this.userRepository.findOne(\n      { email },\n      { select: ['id', 'createdAt', 'username', 'firstname', 'lastname', 'email', 'password'] },\n    );\n  }\n\n  findByUsername(username: string): Promise {\n    return this.userRepository.findOne(\n      { username },\n      { select: ['id', 'createdAt', 'username', 'firstname', 'lastname', 'email', 'password'] },\n    );\n  }\n\n  async hashPassword(password: string): Promise {\n    const salt = await bcrypt.genSalt(10);\n    return await bcrypt.hash(password, salt);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guard/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/categories/entities/category.entity.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/claims/claims.controller.ts\n            \n            controller\n            ClaimsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/claims/claims.service.ts\n            \n            injectable\n            ClaimsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/claims/dto/create-claim.dto.ts\n            \n            class\n            CreateClaimDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/claims/dto/update-claim.dto.ts\n            \n            class\n            UpdateClaimDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/claims/entities/claim.entity.ts\n            \n            class\n            ClaimEntity\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/storage.config.ts\n            \n            function\n            generateFilename\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/storage.config.ts\n            \n            variable\n            storage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/facts/dto/create-fact.dto.ts\n            \n            class\n            CreateFactDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/facts/dto/update-fact.dto.ts\n            \n            class\n            UpdateFactDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/facts/entities/fact.entity.ts\n            \n            class\n            Fact\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/facts/facts.controller.ts\n            \n            controller\n            FactsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/facts/facts.service.ts\n            \n            injectable\n            FactsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/config : ^0.6.1\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/swagger : ^4.8.0\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            bcrypt : ^5.0.1\n        \n            class-validator : ^0.12.2\n        \n            mysql2 : ^2.2.5\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.32\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FACT_CATEGORY_ENUM   (src/.../fact.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/enums/fact.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FACT_CATEGORY_ENUM\n                    \n                \n                        \n                            \n                                 History\n                            \n                        \n                        \n                            \n                                Value : HISTORY\n                            \n                        \n                        \n                            \n                                 Politics\n                            \n                        \n                        \n                            \n                                Value : POLITICS\n                            \n                        \n                        \n                            \n                                 Science\n                            \n                        \n                        \n                            \n                                Value : SCIENCE\n                            \n                        \n                        \n                            \n                                 Sport\n                            \n                        \n                        \n                            \n                                Value : SPORT\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateFilename   (src/.../storage.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/config/storage.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            generateFilename\n                        \n                        \n                    \n                \n            \n            \n                \ngenerateFilename(file)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClaimsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FactsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_ClaimsModule\n\n\n\ncluster_ClaimsModule_providers\n\n\n\ncluster_FactsModule\n\n\n\ncluster_FactsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nClaimsModule\n\nClaimsModule\n\nAppModule -->\n\nClaimsModule->AppModule\n\n\n\n\n\nFactsModule\n\nFactsModule\n\nAppModule -->\n\nFactsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nClaimsService\n\nClaimsService\n\nClaimsModule -->\n\nClaimsService->ClaimsModule\n\n\n\n\n\nFactsService\n\nFactsService\n\nFactsModule -->\n\nFactsService->FactsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            storage   (src/.../storage.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/storage.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            storage\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : diskStorage({\n  destination: './uploads',\n  filename: (req: Request, file: Express.Multer.File, callback) => {\n    callback(null, generateFilename(file));\n  },\n})\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
